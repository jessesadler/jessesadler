1
00:00:02,375 --> 00:00:06,175
[CHIME]

2
00:00:06,175 --> 00:00:08,090
[APPLAUSE]

3
00:00:08,090 --> 00:00:09,410
JESSE SADLER: Thank you.

4
00:00:09,410 --> 00:00:12,290
All right, so my
name's Jesse Sadler.

5
00:00:12,290 --> 00:00:17,420
I am a historian.

6
00:00:17,420 --> 00:00:20,540
I teach at Loyola
Marymount University.

7
00:00:20,540 --> 00:00:25,100
And so even though I am
talking about vctrs today,

8
00:00:25,100 --> 00:00:27,300
what I normally do--

9
00:00:27,300 --> 00:00:30,290
and just quickly,
the slides are online

10
00:00:30,290 --> 00:00:31,650
and I'll have a link at the end.

11
00:00:31,650 --> 00:00:35,270
But what I normally
do is I study history.

12
00:00:35,270 --> 00:00:36,650
I am a historian.

13
00:00:36,650 --> 00:00:41,270
I'm interested in merchant
networks and merchant families

14
00:00:41,270 --> 00:00:45,200
in the 16th and 17th century.

15
00:00:45,200 --> 00:00:49,940
And I'm particularly
interested in inheritance

16
00:00:49,940 --> 00:00:55,610
and what inheritance shows
about how people interacted

17
00:00:55,610 --> 00:00:59,090
with each other and how families
interacted with each other.

18
00:00:59,090 --> 00:01:02,115
And so that leads
me to doing math.

19
00:01:05,470 --> 00:01:09,400
Specifically, in
terms of doing math

20
00:01:09,400 --> 00:01:11,390
with non-decimal currencies.

21
00:01:11,390 --> 00:01:15,010
So these are currencies like
here, this is Flemish pounds.

22
00:01:15,010 --> 00:01:17,750
But basically, currencies
that are in pounds, shillings,

23
00:01:17,750 --> 00:01:19,750
and pence.

24
00:01:19,750 --> 00:01:23,140
And this is a problem
because we don't

25
00:01:23,140 --> 00:01:28,510
learn how to do non-decimal
arithmetic anymore.

26
00:01:28,510 --> 00:01:34,600
And computers are obviously
based on decimal arithmetic.

27
00:01:34,600 --> 00:01:37,960
And so you can't just plug
these numbers into a computer

28
00:01:37,960 --> 00:01:40,660
and do an analysis on
them, it doesn't really

29
00:01:40,660 --> 00:01:43,730
work that way, unfortunately.

30
00:01:43,730 --> 00:01:46,540
So what exactly is
the problem space?

31
00:01:46,540 --> 00:01:50,800
The problem space is that
with non-decimal currencies,

32
00:01:50,800 --> 00:01:55,790
you have to do something called
compound unit arithmetic,

33
00:01:55,790 --> 00:01:56,290
right?

34
00:01:56,290 --> 00:01:59,710
So you have to add up
the separate columns,

35
00:01:59,710 --> 00:02:04,000
and then divide by the
base of that column.

36
00:02:04,000 --> 00:02:06,260
And then you can
get your answer.

37
00:02:06,260 --> 00:02:08,139
So in other words,
we have a number

38
00:02:08,139 --> 00:02:10,570
of different problems here.

39
00:02:10,570 --> 00:02:14,740
We have three separate units
that make up one value.

40
00:02:14,740 --> 00:02:20,200
Those units do not
have decimal bases.

41
00:02:20,200 --> 00:02:24,220
So therefore, we need to use
this compound unit arithmetic.

42
00:02:24,220 --> 00:02:30,020
And finally to make things even
worse, the units can differ.

43
00:02:30,020 --> 00:02:37,210
So the normal, sort of most-used
units in historical occurrences

44
00:02:37,210 --> 00:02:40,570
is to have 20
shillings in a pound,

45
00:02:40,570 --> 00:02:42,910
and 12 pence in a shilling.

46
00:02:42,910 --> 00:02:46,030
But they could change, right?

47
00:02:46,030 --> 00:02:50,270
So you guys didn't know you were
getting so much history today.

48
00:02:50,270 --> 00:02:52,270
JJ in the keynote,
already talked

49
00:02:52,270 --> 00:02:53,770
about history of corporations.

50
00:02:53,770 --> 00:02:56,050
This is what he
is talking about.

51
00:02:56,050 --> 00:02:59,200
I'll have some stuff
about corporate-- well,

52
00:02:59,200 --> 00:03:01,750
some ideas about corporations.

53
00:03:01,750 --> 00:03:07,510
So there is a problem and
you can't just plug this in.

54
00:03:07,510 --> 00:03:13,330
However, programming languages
like R are very flexible.

55
00:03:13,330 --> 00:03:19,900
And so you can use them
to do this essentially

56
00:03:19,900 --> 00:03:23,500
compound arithmetic yourself.

57
00:03:23,500 --> 00:03:26,860
So what we want to do in
a situation like this,

58
00:03:26,860 --> 00:03:30,340
is we want to be able to take
these totals, which are just

59
00:03:30,340 --> 00:03:35,290
added up, right, and
then normalize them, do

60
00:03:35,290 --> 00:03:39,670
the compound unit
arithmetic in order

61
00:03:39,670 --> 00:03:44,510
to get the answer that we want.

62
00:03:44,510 --> 00:03:47,800
And so you can make a,
what I'm calling here,

63
00:03:47,800 --> 00:03:50,920
a normalize() function,
which basically

64
00:03:50,920 --> 00:03:53,530
takes a vector of
length three, the amount

65
00:03:53,530 --> 00:03:56,800
of units that we have,
and then normalizes

66
00:03:56,800 --> 00:04:03,080
them using remainder
division, essentially.

67
00:04:03,080 --> 00:04:06,680
And then brings
them all together.

68
00:04:06,680 --> 00:04:07,310
OK.

69
00:04:07,310 --> 00:04:09,850
So this is great.

70
00:04:09,850 --> 00:04:11,360
We have a normalize() function.

71
00:04:11,360 --> 00:04:13,610
We're ready to go.

72
00:04:13,610 --> 00:04:15,100
We've got something.

73
00:04:15,100 --> 00:04:19,930
We can even create an S3 class.

74
00:04:19,930 --> 00:04:23,770
And S3 classes-- who here
has built their own S3

75
00:04:23,770 --> 00:04:24,933
classes before?

76
00:04:24,933 --> 00:04:26,350
All right, a number
of you, right?

77
00:04:26,350 --> 00:04:30,400
S3 classes are great because
they're really easy to make,

78
00:04:30,400 --> 00:04:31,690
right?

79
00:04:31,690 --> 00:04:33,910
I just built an S3 class, right?

80
00:04:33,910 --> 00:04:39,130
The key here is the
structure() part, right?

81
00:04:39,130 --> 00:04:44,470
And so this is a class that
has a value into it, x.

82
00:04:44,470 --> 00:04:48,970
And then it has, I
called the class "lsd",

83
00:04:48,970 --> 00:04:53,780
which is the Latin terminology
for pounds, shillings,

84
00:04:53,780 --> 00:04:55,480
and pence.

85
00:04:55,480 --> 00:05:01,690
And then I've added
a bases attributes

86
00:05:01,690 --> 00:05:05,590
so that we can know what
the bases of the shillings

87
00:05:05,590 --> 00:05:07,540
and pence units are.

88
00:05:07,540 --> 00:05:09,850
All right, and so
I can just do this.

89
00:05:09,850 --> 00:05:14,980
And I can create something and
it doesn't have a nice printing

90
00:05:14,980 --> 00:05:16,340
method or anything right now.

91
00:05:16,340 --> 00:05:19,580
But I've created an S3 class.

92
00:05:19,580 --> 00:05:21,370
OK, so great.

93
00:05:21,370 --> 00:05:23,210
I've created S3 class.

94
00:05:23,210 --> 00:05:25,250
Now I'm going to sit
down and figure out,

95
00:05:25,250 --> 00:05:26,770
what am I going to do with this?

96
00:05:26,770 --> 00:05:28,430
What else do I need to do?

97
00:05:28,430 --> 00:05:33,230
Well, right now, I can only
have one value at a time.

98
00:05:33,230 --> 00:05:35,710
So maybe I need to have
multiple values so I

99
00:05:35,710 --> 00:05:37,840
should use a list or something.

100
00:05:37,840 --> 00:05:40,570
And then I need to change
the normalization method.

101
00:05:40,570 --> 00:05:42,130
OK, no problem.

102
00:05:42,130 --> 00:05:44,680
All right, so what
else do I need to do?

103
00:05:47,750 --> 00:05:52,600
OK, at this point, it
gets really confusing

104
00:05:52,600 --> 00:05:56,000
because you have to
implement all these methods.

105
00:05:56,000 --> 00:05:58,630
And it's not really
clear how exactly

106
00:05:58,630 --> 00:06:00,190
you're going to
do them, and what

107
00:06:00,190 --> 00:06:02,470
methods you have to
implement, and why

108
00:06:02,470 --> 00:06:05,050
you need to do them and so on.

109
00:06:05,050 --> 00:06:08,710
And so basically, I went through
this and I implemented some

110
00:06:08,710 --> 00:06:11,090
methods and some I didn't.

111
00:06:11,090 --> 00:06:13,090
And then I talked to
Hadley Wickham and he said,

112
00:06:13,090 --> 00:06:19,150
no, what you should do is
that you should use vctrs.

113
00:06:19,150 --> 00:06:24,370
And so vctrs is a
package that gives you

114
00:06:24,370 --> 00:06:31,090
a path to implementing all
of those different methods

115
00:06:31,090 --> 00:06:33,700
to actually creating
your own S3

116
00:06:33,700 --> 00:06:36,550
class without having
to know everything

117
00:06:36,550 --> 00:06:41,550
there is to know about
the different S3 classes.

118
00:06:41,550 --> 00:06:45,460
So the goals of
the vctrs package

119
00:06:45,460 --> 00:06:51,190
are fairly simple in
some ways, but very deep.

120
00:06:51,190 --> 00:06:53,590
It's about type stability
and size stability.

121
00:06:53,590 --> 00:06:57,100
And Hadley talked about this
at the last RStudio conference.

122
00:06:57,100 --> 00:07:03,220
But I am going to focus on
this last aspect of building S3

123
00:07:03,220 --> 00:07:04,220
classes.

124
00:07:04,220 --> 00:07:06,880
So what do you get by
using this vctrs package?

125
00:07:06,880 --> 00:07:10,070
Well, as I said before,
you get a clear path.

126
00:07:10,070 --> 00:07:12,810
But you also get
consistency with base R.

127
00:07:12,810 --> 00:07:14,800
It's just an S3
class and so there's

128
00:07:14,800 --> 00:07:17,620
no reason why your
users would need to know

129
00:07:17,620 --> 00:07:19,720
that it's based on vctrs.

130
00:07:19,720 --> 00:07:22,420
And then finally,
it is integrated

131
00:07:22,420 --> 00:07:27,740
and continuing to be
integrated into the Tidyverse.

132
00:07:27,740 --> 00:07:31,060
OK, so what I want
to do in this talk,

133
00:07:31,060 --> 00:07:33,460
and for the rest of
the talk basically,

134
00:07:33,460 --> 00:07:38,860
is talk about why you might
want to create your own S3

135
00:07:38,860 --> 00:07:45,070
class through this example
of non-decimal currencies.

136
00:07:45,070 --> 00:07:47,320
Why you should use vctrs.

137
00:07:47,320 --> 00:07:51,670
And to point you to some
things of how you can do it.

138
00:07:51,670 --> 00:07:57,790
And I don't have enough
time to go through and do

139
00:07:57,790 --> 00:08:02,350
all of a tutorial on this and
show all the different steps.

140
00:08:02,350 --> 00:08:07,420
And so what I've done, is I've
created a package that I'm

141
00:08:07,420 --> 00:08:10,630
calling debvctrs,
which is a simplified

142
00:08:10,630 --> 00:08:12,910
version of the
package where I've

143
00:08:12,910 --> 00:08:16,450
done more of this, in debkeepr.

144
00:08:16,450 --> 00:08:18,910
And you see the URLs there.

145
00:08:18,910 --> 00:08:21,850
And what the debvctrs
package is, is it

146
00:08:21,850 --> 00:08:25,090
provides a tutorial
of a step-by-step way

147
00:08:25,090 --> 00:08:26,120
to get through this.

148
00:08:26,120 --> 00:08:31,090
And I will go through
some of these steps now.

149
00:08:31,090 --> 00:08:36,309
And so just as a side,
the image that you see

150
00:08:36,309 --> 00:08:40,400
there is a trademark of an
individual who would use that.

151
00:08:40,400 --> 00:08:44,280
So again, more history stuff.

152
00:08:44,280 --> 00:08:47,710
OK, so there's basically
six different steps

153
00:08:47,710 --> 00:08:51,940
to creating a S3
class with vctrs.

154
00:08:51,940 --> 00:08:54,070
Again, I'm not going to
go through all these.

155
00:08:54,070 --> 00:08:58,570
I'm going to concentrate on the
first half-- the first three.

156
00:08:58,570 --> 00:09:01,150
And I won't go into
the last three,

157
00:09:01,150 --> 00:09:03,520
but I will talk about them.

158
00:09:03,520 --> 00:09:07,730
You'll see how they are
when they're implemented.

159
00:09:07,730 --> 00:09:12,370
And if you're creating a class
that's based on double vectors,

160
00:09:12,370 --> 00:09:13,870
you only have to do four of these.

161
00:09:13,870 --> 00:09:16,610
Two of these steps
you get for free.

162
00:09:16,610 --> 00:09:19,900
And so just to give you an
idea, so debvctrs is a package

163
00:09:19,900 --> 00:09:22,870
and it's tested and
it has everything.

164
00:09:22,870 --> 00:09:27,640
But the way that the scripts
are organized is to follow this.

165
00:09:27,640 --> 00:09:31,930
And then within the
scripts, there's

166
00:09:31,930 --> 00:09:34,720
a lot of different comments
on how to do these things.

167
00:09:34,720 --> 00:09:37,330
So I definitely recommend
that you go and look at this.

168
00:09:37,330 --> 00:09:41,380
It's on GitHub and you
see that you URL there.

169
00:09:41,380 --> 00:09:44,680
OK, so let's go through
some of these choices

170
00:09:44,680 --> 00:09:48,730
that I made with
debkeepr / debvctrs.

171
00:09:48,730 --> 00:09:50,830
And so just as a
reminder, right,

172
00:09:50,830 --> 00:09:53,200
to go back to our
problem space, we

173
00:09:53,200 --> 00:09:56,890
have to deal with these
issues of compound unit

174
00:09:56,890 --> 00:10:01,690
arithmetic of representing
a single value with three

175
00:10:01,690 --> 00:10:04,310
different numbers.

176
00:10:04,310 --> 00:10:08,320
So in designing this, I
thought about different things.

177
00:10:08,320 --> 00:10:11,170
So one, I didn't want to
just decimalize everything.

178
00:10:11,170 --> 00:10:16,360
I wanted to maintain the
structure of the numbers.

179
00:10:16,360 --> 00:10:18,910
I wanted to keep track of
the bases of the shillings

180
00:10:18,910 --> 00:10:22,000
and pence because
they could differ.

181
00:10:22,000 --> 00:10:26,980
And I wanted to make sure
that if two values had

182
00:10:26,980 --> 00:10:29,260
different bases,
that they couldn't

183
00:10:29,260 --> 00:10:32,330
be combined in any way.

184
00:10:32,330 --> 00:10:36,550
But at the same time, I did want
to create a decimalized class

185
00:10:36,550 --> 00:10:39,580
that I could use as a fallback.

186
00:10:39,580 --> 00:10:44,170
And this would have the same
basic attributes of a bases

187
00:10:44,170 --> 00:10:48,040
attribute that you
could follow what

188
00:10:48,040 --> 00:10:50,950
the different bases of the
pounds and shillings are.

189
00:10:50,950 --> 00:10:55,970
But in addition, it would
have an attribute on the unit.

190
00:10:55,970 --> 00:10:58,060
So it would be a
decimalized unit

191
00:10:58,060 --> 00:11:02,620
of the pounds unit, or the
shillings unit, or the pence

192
00:11:02,620 --> 00:11:03,920
unit, right?

193
00:11:03,920 --> 00:11:06,140
And different units
can come together

194
00:11:06,140 --> 00:11:08,210
because they can be
the same currency,

195
00:11:08,210 --> 00:11:12,830
but there needs to be a
way in which that's done.

196
00:11:12,830 --> 00:11:17,390
And so I'm calling
these classes deb_lsd,

197
00:11:17,390 --> 00:11:19,880
deb is short for double
entry bookkeeping,

198
00:11:19,880 --> 00:11:24,890
which is where you find
all these different values.

199
00:11:24,890 --> 00:11:27,890
And then deb_decimal.

200
00:11:27,890 --> 00:11:29,810
So again, I'm not
going to go into this.

201
00:11:29,810 --> 00:11:32,430
But this just gives
you an idea of this--

202
00:11:32,430 --> 00:11:37,520
these are the steps within
the first major step

203
00:11:37,520 --> 00:11:39,380
of creating the vector.

204
00:11:39,380 --> 00:11:43,220
And so it's broken down here.

205
00:11:43,220 --> 00:11:47,790
And I'll just give
you this slide,

206
00:11:47,790 --> 00:11:52,580
which is a simplified version
of the creation of the class.

207
00:11:52,580 --> 00:11:54,860
This doesn't have any
checks or anything,

208
00:11:54,860 --> 00:11:58,040
but you can see here
the different arguments

209
00:11:58,040 --> 00:12:01,940
that we have on the left.

210
00:12:01,940 --> 00:12:05,550
The different vectors that
can be put in for pounds,

211
00:12:05,550 --> 00:12:06,650
shillings, and pence.

212
00:12:06,650 --> 00:12:10,020
And then on the right
just the single one.

213
00:12:10,020 --> 00:12:14,330
And then the attributes
of each class.

214
00:12:14,330 --> 00:12:17,960
And then here, we have
the actual creation.

215
00:12:17,960 --> 00:12:22,100
And so with the
deb_lsd, when we want

216
00:12:22,100 --> 00:12:24,950
to keep these
tripartite structures,

217
00:12:24,950 --> 00:12:27,810
I'm going to use a
record-style vector.

218
00:12:27,810 --> 00:12:31,370
And so this is
essentially a list that

219
00:12:31,370 --> 00:12:36,140
has vectors of equal length.

220
00:12:36,140 --> 00:12:41,660
And so that gives us
a basis from which

221
00:12:41,660 --> 00:12:46,280
we can have this
different structure--

222
00:12:46,280 --> 00:12:49,400
this tripartite structure.

223
00:12:49,400 --> 00:12:53,070
On the right, it's just
essentially, again,

224
00:12:53,070 --> 00:12:55,950
a double vector.

225
00:12:55,950 --> 00:12:58,220
So here, we have now--

226
00:12:58,220 --> 00:12:59,810
I'm skipping some steps, right?

227
00:12:59,810 --> 00:13:04,620
But this is what it looks like
if we implement our class.

228
00:13:04,620 --> 00:13:08,990
And so we can start
here on the left.

229
00:13:08,990 --> 00:13:13,155
We have now a function
where we can create a class.

230
00:13:13,155 --> 00:13:14,780
And so we have
different things that we

231
00:13:14,780 --> 00:13:18,410
can add into the pound's
values, the shillings values,

232
00:13:18,410 --> 00:13:19,370
the pence values.

233
00:13:19,370 --> 00:13:25,530
And here we're going to take
our standard basis of 12 and 20.

234
00:13:25,530 --> 00:13:32,630
And on the right is
an equivalent vector

235
00:13:32,630 --> 00:13:35,300
that is a decimalized.

236
00:13:35,300 --> 00:13:39,740
And here we have the printing
methods that I've chosen.

237
00:13:39,740 --> 00:13:43,640
So again, these are things
that you can create.

238
00:13:43,640 --> 00:13:48,770
So here, I've chosen to
include the base attributes

239
00:13:48,770 --> 00:13:52,400
and the unit attributes
so it's very clear.

240
00:13:52,400 --> 00:13:56,960
And both work
natively with tibble.

241
00:13:56,960 --> 00:14:00,740
The record-style vectors
are not fully integrated,

242
00:14:00,740 --> 00:14:04,560
but they're getting there.

243
00:14:04,560 --> 00:14:07,530
So the last thing I
want to talk about here

244
00:14:07,530 --> 00:14:11,240
that I have time to
talk about is the issue

245
00:14:11,240 --> 00:14:13,370
of casting and
coercion, which is

246
00:14:13,370 --> 00:14:19,550
really at the heart of what is
happening as you are creating

247
00:14:19,550 --> 00:14:23,780
your vectors, your classes,
and want them to interact

248
00:14:23,780 --> 00:14:27,240
with other different classes.

249
00:14:27,240 --> 00:14:30,600
So the workflow is
fairly simple simple.

250
00:14:30,600 --> 00:14:32,390
You have a boilerplate that you're

251
00:14:32,390 --> 00:14:34,160
going to use on each time.

252
00:14:34,160 --> 00:14:36,740
And this is the same for
casting and coercion,

253
00:14:36,740 --> 00:14:39,000
where you define the
method for the class.

254
00:14:39,000 --> 00:14:40,700
And then you give
a default, then

255
00:14:40,700 --> 00:14:42,980
you do the methods
within the class.

256
00:14:42,980 --> 00:14:46,490
And then the methods with
any compatible classes

257
00:14:46,490 --> 00:14:49,880
that you decide to choose.

258
00:14:49,880 --> 00:14:53,360
So what coercion
and casting do is

259
00:14:53,360 --> 00:14:56,720
they are kind of two
sides of the same coin.

260
00:14:56,720 --> 00:15:00,770
Coercion looks
for and determines

261
00:15:00,770 --> 00:15:06,920
what the common type is with
this function, vec_ptype2().

262
00:15:06,920 --> 00:15:10,830
While casting does the
actual transformation.

263
00:15:10,830 --> 00:15:14,180
And so things like
comparison between classes

264
00:15:14,180 --> 00:15:17,840
are made possible
by implementing

265
00:15:17,840 --> 00:15:20,970
both of these things.

266
00:15:20,970 --> 00:15:23,810
So again, I don't have a
chance to go through all this,

267
00:15:23,810 --> 00:15:28,350
but coercion is really
about design choices.

268
00:15:28,350 --> 00:15:31,370
There's not necessarily
that much code that

269
00:15:31,370 --> 00:15:32,850
goes into something like this.

270
00:15:32,850 --> 00:15:35,690
And so in this
instance, with debvctrs

271
00:15:35,690 --> 00:15:40,790
I decided to have a double
goes to deb_decimal,

272
00:15:40,790 --> 00:15:43,070
which would then
go to a deb_lsd.

273
00:15:43,070 --> 00:15:50,210
So if you had these three
types in combined function

274
00:15:50,210 --> 00:15:51,800
then you would get a deb_lsd.

275
00:15:54,770 --> 00:15:57,650
Casting is a little
bit more interesting

276
00:15:57,650 --> 00:16:01,100
because this is where we
have the programmatic logic

277
00:16:01,100 --> 00:16:03,600
of the actual transformation.

278
00:16:03,600 --> 00:16:06,480
And one reason why I
think that debvctrs

279
00:16:06,480 --> 00:16:09,510
is an interesting
example of this

280
00:16:09,510 --> 00:16:14,220
is because I have two
different kinds of vectors.

281
00:16:14,220 --> 00:16:17,460
And so you have to think
about how you can combine them

282
00:16:17,460 --> 00:16:18,960
in different ways.

283
00:16:18,960 --> 00:16:22,980
And so here, again, the
code is not necessarily

284
00:16:22,980 --> 00:16:28,020
super easy to read, but
this is taking a deb_decimal

285
00:16:28,020 --> 00:16:32,310
and then converting it to
this tripartite structure.

286
00:16:32,310 --> 00:16:36,070
And essentially, what I'm
doing is taking simple ifelse

287
00:16:36,070 --> 00:16:40,060
statement, what is the unit.

288
00:16:40,060 --> 00:16:44,310
And then from that
unit, placing it

289
00:16:44,310 --> 00:16:50,790
where it should be in a call
to create a deb_lsd vector.

290
00:16:50,790 --> 00:16:52,920
And then finally,
normalizing it so

291
00:16:52,920 --> 00:16:55,740
that we get a normalized
value so that we've done

292
00:16:55,740 --> 00:16:58,460
the compound unit arithmetic.

293
00:16:58,460 --> 00:17:02,830
OK, so how do we
put it all together?

294
00:17:02,830 --> 00:17:04,920
So this is essentially
the end point.

295
00:17:04,920 --> 00:17:07,500
Here, I'm just showing
that what you can get.

296
00:17:07,500 --> 00:17:12,300
So we can combine deb_lsd,
deb_decimal, and double

297
00:17:12,300 --> 00:17:13,950
and we get deb_lsd.

298
00:17:13,950 --> 00:17:19,410
We can compare different
types, so 3,255 pence

299
00:17:19,410 --> 00:17:23,250
is less than 15 pounds.

300
00:17:23,250 --> 00:17:26,220
And again, if you
go on, you can do

301
00:17:26,220 --> 00:17:29,790
arithmetic, including
arithmetic with different types.

302
00:17:29,790 --> 00:17:33,780
So what I want to say
is, that you can create

303
00:17:33,780 --> 00:17:36,630
your own S3 three vectors.

304
00:17:36,630 --> 00:17:40,560
You can extend the capabilities
of R to fix your own--

305
00:17:40,560 --> 00:17:41,880
fit your own needs.

306
00:17:41,880 --> 00:17:46,020
And that vctrs provides this
clear developmental path

307
00:17:46,020 --> 00:17:48,270
that enables you to do this.

308
00:17:48,270 --> 00:17:49,082
Thank you.

309
00:17:49,082 --> 00:17:52,456
[APPLAUSE]

310
00:17:57,015 --> 00:17:58,390
HOST: Thank you
very much, Jesse.

311
00:17:58,390 --> 00:17:59,860
That was fantastic.

312
00:17:59,860 --> 00:18:01,160
We have a couple of questions.

313
00:18:01,160 --> 00:18:04,690
If you still want to
sneak one in, please do.

314
00:18:04,690 --> 00:18:07,550
There's a question about whether
you can comment on your choice

315
00:18:07,550 --> 00:18:08,200
between--

316
00:18:08,200 --> 00:18:11,710
you mentioned explicitly
S3 and vectors.

317
00:18:11,710 --> 00:18:14,010
Did you consider
R6 classes?

318
00:18:14,010 --> 00:18:18,770
And how did that factor
into your decision making?

319
00:18:18,770 --> 00:18:20,830
So I looked at
it a little bit,

320
00:18:20,830 --> 00:18:25,090
but mostly I was
sort of interested

321
00:18:25,090 --> 00:18:27,730
in the simplicity of S3.

322
00:18:27,730 --> 00:18:31,060
And like I said, I basically
wrote the entire package

323
00:18:31,060 --> 00:18:33,790
with S3 based on lists.

324
00:18:33,790 --> 00:18:37,630
And then I talked to Hadley, and
then I had like a month of work

325
00:18:37,630 --> 00:18:38,500
to do.

326
00:18:38,500 --> 00:18:40,600
[LAUGHTER]

327
00:18:40,600 --> 00:18:43,330
So the second
question is, once you

328
00:18:43,330 --> 00:18:47,110
had your data in
vctrs format, what

329
00:18:47,110 --> 00:18:49,210
did you have to do
additionally to make

330
00:18:49,210 --> 00:18:52,050
it compatible with Tidyverse?

331
00:18:52,050 --> 00:18:59,050
So like I said,
especially if your vector

332
00:18:59,050 --> 00:19:02,350
is based on a double,
then it pretty much

333
00:19:02,350 --> 00:19:06,460
works right out of the package.

334
00:19:06,460 --> 00:19:11,500
Right now, with
record-style vectors,

335
00:19:11,500 --> 00:19:15,280
there are some things like
mutate() that don't quite work.

336
00:19:15,280 --> 00:19:18,940
But I know that RStudio
is working on that.

337
00:19:18,940 --> 00:19:23,770
But there, you can
just go back to base R

338
00:19:23,770 --> 00:19:26,800
things that work just fine.

339
00:19:26,800 --> 00:19:33,240
And hopefully, soon that
will also get figured out.

340
00:19:33,240 --> 00:19:35,380
And the final question,
what was the process--

341
00:19:35,380 --> 00:19:36,940
what was your
original data format?

342
00:19:36,940 --> 00:19:40,640
I mean, how do you go from
paper records into vectors?

343
00:19:40,640 --> 00:19:45,100
Yeah, so it's fun
thinking about the questions

344
00:19:45,100 --> 00:19:51,650
of big data, because I have
to create all of my own data.

345
00:19:51,650 --> 00:19:54,490
And it's also funny
to think about it

346
00:19:54,490 --> 00:19:56,157
in terms of reproducible data.

347
00:19:56,157 --> 00:19:57,240
Oh, don't change the data.

348
00:19:57,240 --> 00:19:58,240
And it's like, well, wait.

349
00:19:58,240 --> 00:19:58,810
I created it.

350
00:19:58,810 --> 00:20:01,120
I can change it if I want to.

351
00:20:01,120 --> 00:20:03,640
But basically, I
take these numbers,

352
00:20:03,640 --> 00:20:08,350
I take these documents,
and I input them

353
00:20:08,350 --> 00:20:11,960
by hand trying to figure
out what the numbers are.

354
00:20:11,960 --> 00:20:18,490
And do it in a
spreadsheet program,

355
00:20:18,490 --> 00:20:21,190
and then export it CSV.

356
00:20:21,190 --> 00:20:29,170
And there is a function in
debkeepr, but not in debvctrs

357
00:20:29,170 --> 00:20:37,270
that will take that and
create deb_lsd columns

358
00:20:37,270 --> 00:20:39,670
from those three
different columns.

359
00:20:39,670 --> 00:20:41,170
Thank you very much.

360
00:20:41,170 --> 00:20:41,980
Thank you.

361
00:20:41,980 --> 00:20:42,880
[APPLAUSE]

362
00:20:42,880 --> 00:20:46,230
[CHIME]
